From dce4bc74f2b978d3f1b5b3f066cdb076cbbab33c Mon Sep 17 00:00:00 2001
From: Sunita Singh <sunitasingh@Sunitas-MacBook-Pro.local>
Date: Fri, 9 Feb 2024 10:38:49 +0545
Subject: [PATCH] optimized code

---
 pageOjects/campaign.po.js       | 238 +++++++++++++++++---------------
 tests/campaign/campaign.spec.js |  71 +++++++---
 2 files changed, 178 insertions(+), 131 deletions(-)

diff --git a/pageOjects/campaign.po.js b/pageOjects/campaign.po.js
index 4595be6..21ee58e 100644
--- a/pageOjects/campaign.po.js
+++ b/pageOjects/campaign.po.js
@@ -7,35 +7,17 @@ exports.CampaignPage = class CampaignPage {
     constructor(page) {
         this.page = page;
         this.campaignSubMenu = '(//div[contains(text(),"Campaign")])[1]';
-        this.campaignSearchField = '//input[@placeholder="Search ..."]';
         this.campaignSearchButton = '//button[@id="table-search"]';
         this.campaignSearchResetButton = '//button[@id="table-reset"]';
-        this.campaignSearchListValidation = '(//div[contains(text(),"Campaign")])[2]//following::span[2]';
-        this.campaignListView = '(//div[contains(text(),"Campaign")])[2]';
         this.campaignAddButton = '//span[contains(text(),"Add")]';
-        this.campaignNameField = "//input[@id='campaign-name']"
-        this.campaignStartDateField = "//div[@id='campaign-start-date']"
-        this.campaignEndDateField = "//div[@id='campaign-end-date']"
-        this.selectStartDate = '//div[@id="2024-01-31"]'
-        this.selectEndDate = '//div[@id="2024-02-05"]'
-        this.referralField = "//input[@id='campaign-reward-value-referral']"
-        this.refereeField = "//input[@id='campaign-reward-value-referee']"
-        this.sourceCodeField = "//textarea[@id='campaign-source-code']"
-        this.smsField = "//textarea[@id='campaign-sms-script']"
-        this.socialChannelField = "//textarea[@id='campaign-social-channel-script']"
-        this.awardDescriptionField = "//input[@id='campaign-award-description']"
-        this.awardTitleField = "//input[@id='campaign-award-title']"
-        this.refereeWithRewardField = "//input[@id='campaign-referee-notification-description-with-reward']"
-        this.refereeWithoutRewardField = "//input[@id='campaign-referee-notification-description-without-reward']"
-        this.referralWithRewardField = "//input[@id='campaign-referral-notification-description-with-reward']"
-        this.campaignImageUpload = '//div[@id="campaign-image"]//div//label//span'
-        this.campaignImageReupload = '//div[@id="campaign-image"]//div//label//img'
         this.saveButton = '//button[@id="campaign-save"]'
         this.cancelButton = '//a[@id="campaign-cancel"]'
-        this.alert = '//div[@role="alert"]'
         this.campaignEditButton = 'a'
         this.campaignDeleteButton = 'button'
         this.campaignDeleteConfirm = '//button[@id="popup-save"]'
+
+        this.campaignSearchListValidation = '(//div[contains(text(),"Campaign")])[2]//following::span[2]';
+        this.alert = '//div[@role="alert"]'
         this.campaignValidation = '(//*[@class="text-red-600"])[1]'
         this.referralValidation = '(//*[@class="text-red-600"])[4]'
         this.refereeValidation = '(//*[@class="text-red-600"])[5]'
@@ -49,39 +31,84 @@ exports.CampaignPage = class CampaignPage {
         this.referralwithValidation = '(//*[@class="text-red-600"])[13]'
         this.imageValidation = '(//*[@class="text-red-600 mt-20"])'
         this.campaignEditMatch = '//tbody//tr//td//span'
+
+        this.campaignListView = '(//div[contains(text(),"Campaign")])[2]';
+        this.campaignCreateView='(//div[contains(text(),"Campaign: Create")])'
+        this.campaignEditView='(//div[contains(text(),"Campaign: Edit")])'
+        this.campaignDeleteView='//h2[contains(text(),"Are you sure you want to delete?")]'
+
+        this.campaignSearchField = '//input[@placeholder="Search ..."]';
+        this.campaignNameField = "//input[@id='campaign-name']"
+        this.campaignStartDateField = '//div[@id="campaign-start-date"]//input'
+        this.campaignEndDateField = '//div[@id="campaign-end-date"]//input'
+        this.selectStartDate = '//div[@id="2024-01-31"]'
+        this.selectEndDate = '//div[@id="2024-02-28"]'
+        this.updateStartDate = '//div[@id="2024-02-02"]'
+        this.updateEndDate = '//div[@id="2024-02-24"]'
+        this.referralField = "//input[@id='campaign-reward-value-referral']"
+        this.refereeField = "//input[@id='campaign-reward-value-referee']"
+        this.sourceCodeField = "//textarea[@id='campaign-source-code']"
+        this.smsField = "//textarea[@id='campaign-sms-script']"
+        this.socialChannelField = "//textarea[@id='campaign-social-channel-script']"
+        this.awardDescriptionField = "//input[@id='campaign-award-description']"
+        this.awardTitleField = "//input[@id='campaign-award-title']"
+        this.refereeWithRewardField = "//input[@id='campaign-referee-notification-description-with-reward']"
+        this.refereeWithoutRewardField = "//input[@id='campaign-referee-notification-description-without-reward']"
+        this.referralWithRewardField = "//input[@id='campaign-referral-notification-description-with-reward']"
+        this.campaignImageUpload = '//div[@id="campaign-image"]//div//label//span'
+        this.campaignImageReupload = '//div[@id="campaign-image"]//div//label//img'
+
         this.campaignTable = '(//div[contains(text(),"Campaign")])[2]//following::table'
         this.campaignRow = 'tbody tr'
         this.campaignColumn = 'thead tr th'
         this.tableData = 'td'
-
     }
 
-    async campaignSearchReset(campaignSearch) {
-        await this.page.waitForTimeout(3000);
-        await this.page.locator(this.campaignSubMenu).click();
+    async campaignSearch(campaignSearch) {
         await this.page.locator(this.campaignSearchField).fill(campaignSearch);
         await this.page.locator(this.campaignSearchButton).click();
+    }
+
+    async verifySearch(campaignSearch) {
         const campaignSearchList = await this.page.locator(this.campaignSearchListValidation);
+        const table = await this.page.locator(this.campaignTable)
+        const rows = await table.locator(this.campaignRow)
         await expect(this.page.locator(this.campaignSearchField)).toHaveValue(campaignSearch)
         await expect(campaignSearchList).toHaveText(campaignSearch);
+        return await rows.count();
+    }
+
+    async searchReset(){
         await this.page.locator(this.campaignSearchResetButton).click();
+    }
+
+    async verifyReset(beforeReset) {
+        const table = await this.page.locator(this.campaignTable)
+        const rows = await table.locator(this.campaignRow)
         await expect(this.page.locator(this.campaignSearchField)).toHaveValue('');
+        await expect(await rows.count()).toBeGreaterThan(beforeReset);
 
     }
 
     async campaignView() {
-        await this.page.waitForTimeout(4000);
         await this.page.locator(this.campaignSubMenu).click();
-        await this.page.waitForTimeout(5000);
+    }
+
+    async isCampaignPage() {
         const campaignList = await this.page.locator(this.campaignListView);
         await expect(campaignList).toBeVisible();
-        console.log("Campaign View Test Passed!!!")
     }
 
-    async campaignAdd() {
-        await this.page.waitForTimeout(5000);
-        await this.page.locator(this.campaignSubMenu).click();
+    async campaignAddPage() {
         await this.page.locator(this.campaignAddButton).click();
+    }
+
+    async iscampaignAddPage() {
+        const campaignCreate = await this.page.locator(this.campaignCreateView);
+        await expect(campaignCreate).toBeVisible();
+    }
+
+    async campaignAddFields() {
         await this.page.locator(this.campaignNameField).fill(campaigntestData.campaignadd.campaignName);
         await this.page.locator(this.campaignStartDateField).click();
         await this.page.locator(this.selectStartDate).click();
@@ -103,16 +130,40 @@ exports.CampaignPage = class CampaignPage {
         await this.page.waitForTimeout(2000);
         await this.page.locator(this.saveButton).click();
         await this.page.waitForTimeout(2000);
+    }
+
+    async verifyAddSuccessMessage() {
         const successMessage = await this.page.locator(this.alert);
         await expect(successMessage).toContainText(campaigntestData.campaignadd.campaignSavedMessage)
-        console.log("Campaign Add Test Passed!!!")
     }
 
-    async campaignAddValidation() {
-        await this.page.waitForTimeout(5000);
-        await this.page.locator(this.campaignSubMenu).click();
-        await this.page.locator(this.campaignAddButton).click();
+    async verifyCampaignList(campaignName) {
+        const table = await this.page.locator(this.campaignTable)
+        const rows = await table.locator(this.campaignRow)
+        const col = await table.locator(this.campaignColumn)
+        let nameMatch = ''
+        console.log(await rows.count())
+        console.log(await col.count())
+
+        for (let i = 0; i < await rows.count(); i++) {
+                const row = await rows.nth(i);
+                const tds = row.locator('td');
+                nameMatch = await tds.nth(0).textContent();
+                console.log(nameMatch)
+
+                if (nameMatch == campaignName) {
+                    break;
+                }
+        }
+        await expect(nameMatch).toBe(campaignName)
+        
+    }
+
+    async campaignAddFieldValidation() {
         await this.page.locator(this.saveButton).click();
+    }
+
+    async verifyAddValidationMessage() {
         const name = await this.page.locator(this.campaignValidation)
         await expect(name).toContainText('Campaign Name is required')
         const referral = await this.page.locator(this.referralValidation)
@@ -137,34 +188,34 @@ exports.CampaignPage = class CampaignPage {
         await expect(referraleewithoutreward).toContainText('Referral Notification Description (With Reward) is required')
         const image = await this.page.locator(this.imageValidation)
         await expect(image).toContainText('Campaign Image is required')
-        console.log("Campaign Add Validation Test Passed!!!")
     }
 
-    async campaignEdit(campaignSearch) {
+    async campaignEditPage(campaignName){
         await this.page.locator(this.campaignSubMenu).click();
         await this.page.waitForTimeout(5000)
         const table = await this.page.locator(this.campaignTable)
         const col = await table.locator(this.campaignColumn)
         const rows = await table.locator(this.campaignRow)
-        console.log("Number of rows in campaign = ", await rows.count())
-        console.log("Number of cols in campaign= ", await col.count())
         const matchedRow = rows.filter({
             has: this.page.locator(this.tableData),
-            hasText: campaignSearch
+            hasText: campaignName
         })
         await this.page.waitForTimeout(2000)
-
         await matchedRow.locator(this.campaignEditButton).click()
-        await this.page.waitForTimeout(5000)
-        await this.page.locator(this.campaignNameField).fill(campaigntestData.campaignedit.campaignName);
-        // await this.page.locator(this.campaignStartDateField).click();
-        // await this.page.locator(this.selectStartDate).click();
-
-        // await this.page.locator(this.campaignEndDateField).click();
-        // await this.page.waitForTimeout(2000);
+    }
 
-        //await this.page.locator(this.selectEndDate).click();
+    async iscampaignEditPage(){
+        const campaignupdate = await this.page.locator(this.campaignEditView);
+        await expect(campaignupdate).toBeVisible();  
+    }
 
+    async campaignEditFields() {
+        await this.page.locator(this.campaignNameField).fill(campaigntestData.campaignedit.campaignName);
+        await this.page.locator(this.campaignStartDateField).click()
+        await this.page.locator(this.updateStartDate).click();
+        await this.page.waitForTimeout(2000);
+        await this.page.locator(this.campaignEndDateField).click()
+        await this.page.locator(this.updateEndDate).click();
         await this.page.locator(this.referralField).fill(campaigntestData.campaignedit.referral);
         await this.page.locator(this.refereeField).fill(campaigntestData.campaignedit.referee);
         await this.page.locator(this.sourceCodeField).fill(campaigntestData.campaignedit.sourceCode);
@@ -175,18 +226,20 @@ exports.CampaignPage = class CampaignPage {
         await this.page.locator(this.refereeWithRewardField).fill(campaigntestData.campaignedit.refereeWithReward);
         await this.page.locator(this.refereeWithoutRewardField).fill(campaigntestData.campaignedit.refereeWithoutReward);
         await this.page.locator(this.referralWithRewardField).fill(campaigntestData.campaignedit.referralWithReward);
-        // await this.page.locator(this.campaignImageUpload).click();
-        // await this.page.locator(this.campaignImageUpload).setInputFiles(campaigntestData.campaignadd.campaignImage);
-        await this.page.waitForTimeout(2000);
+        await this.page.locator(this.campaignImageReupload).click();
+        await this.page.locator(this.campaignImageReupload).setInputFiles(campaigntestData.campaignadd.campaignImage);
         await this.page.locator(this.saveButton).click();
         await this.page.waitForTimeout(2000);
+    }
+
+    async verifyEditSuccessMessage(savedMsg) {
         const successMessage = await this.page.locator(this.alert);
+
         await expect(successMessage).toContainText(campaigntestData.campaignedit.campaignUpdatedMessage)
-        console.log("Campaign Edit Test Passed!!!")
-        console.log("Campaign edited is=== " + campaignSearch)
+        console.log(successMessage)
     }
 
-    async campaignDelete(campaignSearch) {
+    async campaignDeletePage(campaignSearch) {
         await this.page.locator(this.campaignSubMenu).click();
         await this.page.waitForTimeout(5000)
         const table = await this.page.locator(this.campaignTable)
@@ -196,75 +249,42 @@ exports.CampaignPage = class CampaignPage {
             has: this.page.locator(this.tableData),
             hasText: campaignSearch
         })
-
         await this.page.waitForTimeout(2000);
         await matchedRow.locator(this.campaignDeleteButton).click();
+    }
+
+    async iscamapaignDeletePopup(){
+        const campaigndelete = await this.page.locator(this.campaignDeleteView);
+        await expect(campaigndelete).toBeVisible();
+    }
+
+    async campaignDelete(){
         await this.page.waitForTimeout(2000);
-        await this.page.locator(this.campaignDeleteConfirm).click();
+        await this.page.locator(this.campaignDeleteConfirm).click();        
+    }
+
+    async verifycampaignDeleteMessage(){
         const successMessage = await this.page.locator(this.alert);
         await expect(successMessage).toContainText(campaigntestData.campaignadd.campaignDeletedMessage)
-        console.log("Campaign Delete Test Passed!!!")
     }
 
-    async verifyCampaignAddEdit(campaignSearch) {
-        await this.page.locator(this.campaignSubMenu).click();
-        await this.page.waitForTimeout(5000)
+    async verifyCampaignListforDelete(campaignName) {
         const table = await this.page.locator(this.campaignTable)
         const rows = await table.locator(this.campaignRow)
         const col = await table.locator(this.campaignColumn)
+        let nameMatch = ''
         for (let i = 0; i < await rows.count(); i++) {
-            let matchFound = false;
-            const row = await rows.nth(i);
-            const tds = row.locator('td');
-
-            for (let j = 0; j < await col.count() - 1; j++) {
-                const nameMatch = await tds.nth(j).textContent()
-                if (nameMatch == campaignSearch) {
-                    console.log("Matched==" + nameMatch)
-                    console.log("Added/Updated Campaign found in the table!!!")
-                    matchFound = true;
-                    break
+                const row = await rows.nth(i);
+                const tds = row.locator('td');
+                nameMatch = await tds.nth(0).textContent();
+                if (nameMatch == campaignName) {
+                    break;
                 }
-
-            }
-            if (matchFound == true) {
-                break;
-            }
-
         }
+        await expect(nameMatch).not.toBe(campaignName)
 
     }
 
-    async verifyCampaignDelete(campaignSearch) {
-        await this.page.locator(this.campaignSubMenu).click();
-        await this.page.waitForTimeout(5000)
-        const table = await this.page.locator(this.campaignTable)
-        const rows = await table.locator(this.campaignRow)
-        const col = await table.locator(this.campaignColumn)
-        let matchFound = false;
-        for (let i = 0; i < await rows.count(); i++) {
-            const row = await rows.nth(i);
-            const tds = row.locator('td');
-
-            for (let j = 0; j < await col.count() - 1; j++) {
-                const nameMatch = await tds.nth(j).textContent()
-                if (nameMatch == campaignSearch) {
-                    console.log("Matched==" + nameMatch)
-                    console.log("Campaign is not deleted from the table!!!")
-                    matchFound = true;
-                    break
-                }
-
-            }
-            if (matchFound == true) {
-                break;
-            }
-
-        }
-        if (matchFound == false) {
-            console.log("Campaign is deleted from the table!!!")
-        }
-    }
 }
 
 
diff --git a/tests/campaign/campaign.spec.js b/tests/campaign/campaign.spec.js
index f28064c..858e662 100644
--- a/tests/campaign/campaign.spec.js
+++ b/tests/campaign/campaign.spec.js
@@ -13,37 +13,46 @@ test.beforeEach(async ({ page }) => {
     await page.goto('/');
     await login.login(testData.validUser.userName, testData.validUser.password);
     await login.verifyValidLogin();
+    
 })
 
 test.describe('Campaign testcases', () => {
     test('View campaign list', async ({ page }) => {
         const campaign = new CampaignPage(page);
         await campaign.campaignView();
+        await campaign.isCampaignPage();
     })
 
     test('Campaign Add (Field Validation)', async ({ page }) => {
         const campaign = new CampaignPage(page);
-        await campaign.campaignAddValidation();
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignAddPage();
+        await campaign.campaignAddFieldValidation();
+        await campaign.verifyAddValidationMessage();
     })
 
     test('Campaign Add and Verify List', async ({ page }) => {
         const campaign = new CampaignPage(page);
-        await campaign.campaignAdd();
-        await campaign.verifyCampaignAddEdit(campaigntestData.campaignadd.campaignName)
-
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignAddPage();
+        await campaign.iscampaignAddPage();
+        await campaign.campaignAddFields();
+        await campaign.verifyAddSuccessMessage();
+        await campaign.verifyCampaignList(campaigntestData.campaignadd.campaignName)
     })
 
     test('Campaign Edit and Verify List', async ({ page, request }) => {
         const campaign = new CampaignPage(page);
         accessToken = await authenticateUser(testData.validUser.userName, testData.validUser.password, { request });
-        console.log("TOKEN:" + accessToken);
         const campaignData = {
-            "start_date": "2024-01-19",
-            "end_date": "2024-02-04",
-            "name": "Test Sunita-01",
+            "start_date": "2024-02-01",
+            "end_date": "2024-02-28",
+            "name": "Test Sunita- " + (Math.random() + 1).toString(36).substring(7),
             "reward_value_referral": 44,
             "reward_value_referee": 44,
-            "source_code": "test source code",
+            "source_code": "Test SC",
             "sms_script": "test sms",
             "social_channel_script": "test social",
             "award_description": "test desc",
@@ -54,18 +63,22 @@ test.describe('Campaign testcases', () => {
             "campaign_image": "https://mmp2-sit.s3.amazonaws.com/flow_jira_1707028679774.jpg"
         }
         campaignName = await addCampaign(campaignData, accessToken, { request });
-        await campaign.campaignEdit(campaignName);
-        await campaign.verifyCampaignAddEdit(campaigntestData.campaignedit.campaignName)
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignEditPage(campaignName);
+        await campaign.iscampaignEditPage();
+        await campaign.campaignEditFields();
+        await campaign.verifyEditSuccessMessage();
+        await campaign.verifyCampaignList(campaigntestData.campaignedit.campaignName)
     })
 
-    test.only('Campaign Delete and Verify List', async ({ page, request }) => {
+    test('Campaign Delete and Verify List', async ({ page, request }) => {
         const campaign = new CampaignPage(page);
         accessToken = await authenticateUser(testData.validUser.userName, testData.validUser.password, { request });
-        console.log("TOKEN:" + accessToken);
         const campaignData = {
             "start_date": "2024-01-19",
             "end_date": "2024-02-04",
-            "name": "Test Sunita-01",
+            "name": "Test Sunita-" + (Math.random() + 1).toString(36).substring(7),
             "reward_value_referral": 44,
             "reward_value_referee": 44,
             "source_code": "test source code",
@@ -79,25 +92,41 @@ test.describe('Campaign testcases', () => {
             "campaign_image": "https://mmp2-sit.s3.amazonaws.com/flow_jira_1707028679774.jpg"
         }
         campaignName = await addCampaign(campaignData, accessToken, { request });
-        await campaign.campaignDelete(campaignName);
-        await campaign.verifyCampaignDelete(campaignName);
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignDeletePage(campaignName);
+        await campaign.iscamapaignDeletePopup();
+        await campaign.campaignDelete();
+        await campaign.verifycampaignDeleteMessage();
+        await campaign.verifyCampaignListforDelete(campaignName);
+    })
 
+    test('Campaign Search', async ({ page }) => {
+        const campaign = new CampaignPage(page);
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignSearch("campaign")
+        await campaign.verifySearch("campaign")
     })
 
-    test('Campaign Search and Reset', async ({ page }) => {
+    test('Campaign Reset', async ({ page }) => {
         const campaign = new CampaignPage(page);
-        await campaign.campaignSearchReset("Hello Campaign")
+        await campaign.campaignView();
+        await campaign.isCampaignPage();
+        await campaign.campaignSearch("campaign");
+        const row_count=  await campaign.verifySearch("campaign")
+        await campaign.searchReset();
+        await campaign.verifyReset(row_count);
     })
 
     test.skip('Campaign Add through API', async ({ request, page, context }) => {
         const campaign = new CampaignPage(page);
-
         accessToken = await authenticateUser(testData.validUser.userName, testData.validUser.password, { request });
         console.log("TOKEN:" + accessToken);
         const campaignData = {
             "start_date": "2024-01-19",
             "end_date": "2024-02-04",
-            "name": "Test Sunita-01",
+            "name": "Test Sunita-" + (Math.random() + 1),
             "reward_value_referral": 44,
             "reward_value_referee": 44,
             "source_code": "dsf",
@@ -112,8 +141,6 @@ test.describe('Campaign testcases', () => {
         }
         campaignName = await addCampaign(campaignData, accessToken, { request });
         console.log(campaignName)
-        await campaign.campaignEdit(campaignName);
-        await campaign.verifyCampaignAddEdit(campaigntestData.campaignedit.campaignName)
 
     });
 
-- 
2.39.2 (Apple Git-143)

